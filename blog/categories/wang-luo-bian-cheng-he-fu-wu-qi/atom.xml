<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 网络编程和服务器 | 生命不息 折腾不止]]></title>
  <link href="http://nicekwell.net/blog/categories/wang-luo-bian-cheng-he-fu-wu-qi/atom.xml" rel="self"/>
  <link href="http://nicekwell.net/"/>
  <updated>2018-01-22T00:33:45+08:00</updated>
  <id>http://nicekwell.net/</id>
  <author>
    <name><![CDATA[nicekwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[把已有的repo工程提交到服务器]]></title>
    <link href="http://nicekwell.net/blog/20171112/ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi.html"/>
    <updated>2017-11-12T23:19:32+08:00</updated>
    <id>http://nicekwell.net/blog/20171112/ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、基础知识</a>    <ul>
      <li><a href="#git" id="markdown-toc-git">1、git</a></li>
      <li><a href="#repo" id="markdown-toc-repo">2、repo</a></li>
      <li><a href="#manifestxml" id="markdown-toc-manifestxml">3、manifest.xml文件</a></li>
    </ul>
  </li>
  <li><a href="#repo-1" id="markdown-toc-repo-1">二、把已有的repo工程提交到自己的服务器</a>    <ul>
      <li><a href="#python3" id="markdown-toc-python3">1、客户端和服务端都安装python3</a></li>
      <li><a href="#section-1" id="markdown-toc-section-1">2、客户端准备一个干净的工程</a></li>
      <li><a href="#manifestgit" id="markdown-toc-manifestgit">3、服务器端创建manifest.git工程</a></li>
      <li><a href="#manifestxml-1" id="markdown-toc-manifestxml-1">4、客户端修改并上传manifest.xml文件</a></li>
      <li><a href="#manifestxml-2" id="markdown-toc-manifestxml-2">5、服务端分析manifest.xml文件，批量创建工程</a></li>
      <li><a href="#manifestxml-3" id="markdown-toc-manifestxml-3">6、客户端分析manifest.xml文件，批量上传到服务器</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">7、测试</a></li>
    </ul>
  </li>
</ul>
<p>  </p>

<p>  repo是google开发的工具，用来管理多个git工程，最常用在Android源码管理上。<br />
  本文介绍的是如何把一个已有的repo工程提交到自己的服务器，在自己的服务器上管理这些源代码，同时保留原来repo组织这些代码仓库的结构。</p>

<!-- more -->

<h1 id="section">一、基础知识</h1>

<h2 id="git">1、git</h2>

<p>  git的详细使用方法这里不介绍，这里只要知道git服务器端建立git仓库的命令：<br />
   <code>git init --bare [仓库名].git</code></p>

<p>  而客户端创建工程、关联远程仓库、第一次提交的方法是：<br />
  <strong>创建工程：</strong><br />
  git init<br />
  <strong>关联远程仓库：</strong><br />
  git remote add origin [远程仓库地址]<br />
  <strong>第一次提交：</strong><br />
  git push -u origin master</p>

<h2 id="repo">2、repo</h2>

<p>  repo的详细使用方法这里也不介绍，repo要用到的命令有：</p>

<p>  <strong>repo init -u [manifest仓库地址]</strong><br />
  初始化repo工程，会把manifest.git仓库拖下来。<br />
  我们搭建好自己的repo服务器后，也可以使用此命令拖下来自己的repo仓库。</p>

<p>  <strong>repo sync</strong><br />
  同步代码。<br />
  搭建好自己的服务器后，用此命令同步时将会从自己的repo仓库同步代码。</p>

<h2 id="manifestxml">3、manifest.xml文件</h2>

<p>  这个文件要好好介绍一下，我们将会对这个文件进行解析，解析出各个git仓库的服务器地址、本地路径，并根据解析的结果创建和同步这些git仓库代码。</p>

<p><strong>1、开头会定义remote</strong></p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/1.png" alt="1.png" /><br />
  可以设置多个remote地址，用后面的name区分。<br />
  后面可以选择使用哪一个remote地址。</p>

<p><strong>2、指定默认参数</strong></p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/2.png" alt="2.png" /><br />
   remote=””   来指定使用哪一个remote地址。<br />
   revision    指定分支，从remote地址拖工程时指定拖哪个分支。<br />
   sync -j      指定同步线程数</p>

<p><strong>3、后面一大堆内容都是指定远程工程路径，以及拖下来的位置</strong></p>

<p>  瑞芯微的文件：</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/3.png" alt="3.png" /></p>

<p>  android原生文件：</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/4.png" alt="4.png" /><br />
  path：本地相对路径，可以不指定，不指定的话表示和name相同。<br />
  name：远程相对与remote地址的路径。<br />
  version：<br />
  groups：<br />
  upstream：<br />
  这里的每个name就代表一个git子工程，整个android工程有很多个git子工程组成，这里指定了各个子工程相对于remote的路径、版本、拖下来后的本地路径。</p>

<h1 id="repo-1">二、把已有的repo工程提交到自己的服务器</h1>

<p>  从上面得知，各个子工程的远程和本地路径都保存在manifest.xml文件里，那么我们只要解析这个文件就能获取服务器端和本地的文件结构。<br />
  在服务器端解析manifes.xml文件，获取所有git工程的远程路径，在服务器端批量创建这些git工程；<br />
  本地解析manifest.xml文件，获取各个git工程的本地路径和远程路径，在本地初始化git工程，并关联、提交到远程。</p>

<h2 id="python3">1、客户端和服务端都安装python3</h2>

<p>  对于ubuntu：sudo apt-get install python3<br />
  后面的脚本基于python3。</p>

<h2 id="section-1">2、客户端准备一个干净的工程</h2>

<p>  客户端是一个已有的repo工程，先准备好干净的代码准备提交，执行以下步骤：</p>

<p>  1、<strong>.repo/repo/repo sync</strong><br />
  2、删掉所有的.git目录<br />
    <code>find . -name ".git" | xargx rm -rf</code><br />
    因为待会会重新初始化这些git工程，所以以前的git信息不需要了。<br />
  3、复制出.repo/manifest.xml文件，删除.repo目录<br />
    repo工程里都会有一个.repo目录，此目录不再需要，但manifest.xml文件记录的各个工程信息是我们需要的，后面会解析此文件，把这个文件复制出来找个地方放一下。</p>

<h2 id="manifestgit">3、服务器端创建manifest.git工程</h2>

<p>  每个repo工程都会有一个 manifest.git 工程，此工程内容就是 manifest.xml 文件，manifest.xml文件记录了各个git子工程的信息。<br />
  我们在服务器创建一个 manifest.git 工程就是用于存放我们自己的 repo 工程的manifest.xml文件。<br />
  一般放在大工程目录下。</p>

<p>  <code>git init --bare /home/git/[工程目录]/manifest.git</code></p>

<h2 id="manifestxml-1">4、客户端修改并上传manifest.xml文件</h2>

<p>  1、把刚刚创建的manifest.git工程拖下来<br />
    <strong>git clone git@[ip]:[proj]/manifest.git</strong></p>

<p>  2、把已有的repo工程里的manifest.xml文件复制过来，并重命名为default.xml<br />
    就是前面删除本地.repo目录时备份的manifest.xml文件。</p>

<p>  3、修改default.xml里面的remote地址，改成新的服务器地址，分支改成master</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/5.png" alt="5.png" /></p>

<p>    注意地址格式写法，只有最后一行的写法是正确的。<br />
    添加新地址后，后面的default配置也要改，remote改成新添加的地址，revision改成master（我们将要保存的分支是master）。</p>

<p>  4、用脚本去掉default.xml里面的version等信息<br />
    默认的xml文件的工程可能带有一些remote、version信息，以后我们放在服务器都是在服务器的master上，这些信息需要清除。</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/6.png" alt="6.png" /></p>

<p>    用这个脚本：<a href="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/del_remote_version.py">del_remote_version.py</a></p>

<p>    把这个脚本复制到manifest.git工程目录，然后执行这个脚本：<br />
    <strong>./del_remote_version.py default.xml</strong></p>

<p>    此脚本会查找default.xml文件中的 remote、revision、upstream信息，并删除。执行后文件如下：</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/7.png" alt="7.png" /></p>

<p>  5、提交manifest工程<br />
    只需要提交default.xml文件即可，脚本不需要提交。</p>

<h2 id="manifestxml-2">5、服务端分析manifest.xml文件，批量创建工程</h2>

<p>  获取到manifest.xml文件的所有name信息（代表所有git子工程），然后用脚本批量创建git工程。</p>

<p>  1、把上面的default.xml文件用scp上传到服务端，放到工程目录下。<br />
  2、进入大工程目录，用 getnames_and_create_project.py 脚本分析 default.xml文件，并创建工程：<br />
    用这个脚本：<a href="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/getnames_and_create_project.py">getnames_and_create_project.py</a></p>

<p>    <strong>./getnames_and_create_project.py default.xml</strong></p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/8.png" alt="8.png" /></p>

<p>    脚本执行完成后会新建很多目录出来：</p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/9.png" alt="9.png" /></p>

<h2 id="manifestxml-3">6、客户端分析manifest.xml文件，批量上传到服务器</h2>

<p>  刚刚在服务器上已经创建好了各个git子工程，这里把它们上传。<br />
  分析manifest.xml文件，获取到所有name信息（代表所有git子工程），然后用脚本批量上传git子工程。</p>

<p>  1、进入上面创建好的干净的工程目录，把上面建立好的default.xml文件复制到这里。<br />
  2、把客户端的id_rsa.pub加入到服务端的 authorized_keys里。<br />
  3、进入大工程目录，客制化以下脚本：<br />
    <a href="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/getnames_and_init_push_git_proj.py">getnames_and_init_push_git_proj.py</a></p>

<p><img src="/images/network-programming-and-server/2017-11-12-ba-yi-you-de-repogong-cheng-ti-jiao-dao-fu-wu-qi/10.png" alt="10.png" /></p>

<p>    修改这里的远程地址，后面会把工程提交到这里。<br />
    这里的地址应当和上面服务器端建立工程的地址相同。</p>

<p>  4、运行脚本</p>

<p>    <strong>./getnames_and_init_push_git_proj.py default.xml</strong><br />
    此脚本会解析default.xml里的name和path，<br />
    会先分析本地path是否为空目录，如果是空目录的话则会创建一个“.gitignore”文件，防止空目录提交失。<br />
    然后初始化本地path路径的代码，作为git工程提交到服务器端的name指定路径下。</p>

<h2 id="section-2">7、测试</h2>

<p>  找一个干净的地方，用 <strong>repo init -u [服务端manifest.git地址]</strong>，<br />
  然后 <strong>repo sync</strong>，此时应该可以同步所有git子工程。</p>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>

]]></content>
  </entry>
  
</feed>
