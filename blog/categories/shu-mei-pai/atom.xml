<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树莓派 | 生命不息 折腾不止]]></title>
  <link href="http://nicekwell.net/blog/categories/shu-mei-pai/atom.xml" rel="self"/>
  <link href="http://nicekwell.net/"/>
  <updated>2017-11-22T19:48:50+08:00</updated>
  <id>http://nicekwell.net/</id>
  <author>
    <name><![CDATA[nicekwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派-wiringPi-编译&amp;头文件&amp;lib]]></title>
    <link href="http://nicekwell.net/blog/20171122/shu-mei-pai-wiringpi-bian-yi-and-tou-wen-jian-and-lib.html"/>
    <updated>2017-11-22T19:40:06+08:00</updated>
    <id>http://nicekwell.net/blog/20171122/shu-mei-pai-wiringpi-bian-yi-and-tou-wen-jian-and-lib</id>
    <content type="html"><![CDATA[<p>  </p>

<p>安装好之后想要使用wiringPi的接口，就必须要包含wiringPi的头文件、链接wiringPi库，本文介绍如何正确编译。</p>

<!-- more -->

<p>安装好之后，会生成以下头文件：</p>

<table>
  <tbody>
    <tr>
      <td>/usr/local/include/wiringPi.h</td>
      <td>提供基础的服务，包括GPIO。</td>
    </tr>
    <tr>
      <td>/usr/local/include/wiringPiI2C.h</td>
      <td>提供I2C相关支持。</td>
    </tr>
    <tr>
      <td>/usr/local/include/wiringPiSPI.h</td>
      <td>提供SPI相关支持。</td>
    </tr>
    <tr>
      <td>/usr/local/include/wiringPiShift.h</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>生成以下库：</p>

<table>
  <tbody>
    <tr>
      <td>/usr/local/lib/libwiringPiDev.so</td>
    </tr>
    <tr>
      <td>等</td>
    </tr>
  </tbody>
</table>

<p> </p>

<p>在编写C程序时：</p>

<ol>
  <li>要 include 头文件，直接用&lt;&gt;即可，不需要指明路径。<br />
如：#include <wiringPi.h>  
编译器会自动从/usr/local/include/目录下寻找头文件。</wiringPi.h></li>
  <li>编译时要连接wiringPi的库。<br />
如：gcc gpio.c -o gpio -<strong>lwiringPi</strong><br />
编译器会自动从/usr/local/lib/目录下寻找库。</li>
</ol>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派-wiringPi-说明和安装]]></title>
    <link href="http://nicekwell.net/blog/20171122/shu-mei-pai-wiringpi-shuo-ming-he-an-zhuang.html"/>
    <updated>2017-11-22T19:16:22+08:00</updated>
    <id>http://nicekwell.net/blog/20171122/shu-mei-pai-wiringpi-shuo-ming-he-an-zhuang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">说明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">原理</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">安装</a></li>
</ul>
<p>  </p>

<p>wiringPi是树莓派上层提供gpio、串口、i2c等硬件操作的一套库，经过其封装后的接口函数使用起来非常方便。<br />
wiringpi已经不局限于C语言了，也提供了其他各种语言的接口，甚至提供了命令行工具，直接在命令行操作GPIO。<br />
我们这里介绍的是wiringPi的C接口。</p>

<!-- more -->

<h3 id="section">说明</h3>

<p>wiringPi是树莓派上层提供gpio、串口、i2c等硬件操作的一套库，经过其封装后的接口函数使用起来非常方便。<br />
wiringpi已经不局限于C语言了，也提供了其他各种语言的接口，甚至提供了命令行工具，直接在命令行操作GPIO。<br />
我们这里介绍的是wiringPi的C接口。</p>

<p>官方首页：<a href="http://wiringpi.com/">http://wiringpi.com/</a><br />
wiringPi-c的github主页：<a href="https://github.com/WiringPi/WiringPi">https://github.com/WiringPi/WiringPi</a><br />
官方说明文档：<a href="http://wiringpi.com/reference/">http://wiringpi.com/reference/</a></p>

<h3 id="section-1">原理</h3>

<p>通过wiringPi 的源码可以看出，<strong>wiringPi是一个在现有的上层接口基础上封装的一层库函数</strong>。上层不通过wiringPi也可以直接通过linux标准接口完成功能，wiringPi封装的好处是使用比较方便（但也裁剪了很多功能）。<br />
如：<br />
  GPIO库，实际上是通过操作GPIO节点实现：<br />
  <img src="/images/raspberrypi/2017-11-22-shu-mei-pai-wiringpi-shuo-ming-he-an-zhuang/1.png" alt="1.png" /></p>

<p>  serial库，实际上也是通过标准的open、write等函数实现：<br />
  <img src="/images/raspberrypi/2017-11-22-shu-mei-pai-wiringpi-shuo-ming-he-an-zhuang/2.png" alt="2.png" /></p>

<h3 id="section-2">安装</h3>

<p>1、用git把代码拖下来<br />
<strong>git clone git://git.drogon.net/wiringPi</strong><br />
也可以从github拖下来：<br />
<strong>git clone git@github.com:WiringPi/WiringPi.git</strong></p>

<p>对比发现作者在这两个地方都进行维护，代码内容完全一样。</p>

<p> </p>

<p>2、安装
进入目录，直接<br />
<strong>./build</strong><br />
不需要sudo权限。</p>

<p>安装过后，就可以使用命令行和C接口了。具体怎么使用见后面内容。</p>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派-pypi-UART串口]]></title>
    <link href="http://nicekwell.net/blog/20171120/shu-mei-pai-pypi-uartchuan-kou.html"/>
    <updated>2017-11-20T19:37:15+08:00</updated>
    <id>http://nicekwell.net/blog/20171120/shu-mei-pai-pypi-uartchuan-kou</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">概述</a></li>
  <li><a href="#pythonpyserial" id="markdown-toc-pythonpyserial">python通用串口库——pyserial</a>    <ul>
      <li><a href="#section-1" id="markdown-toc-section-1">一、安装</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">二、使用</a>        <ul>
          <li><a href="#section-3" id="markdown-toc-section-3">1、打开串口并创建对象</a></li>
          <li><a href="#section-4" id="markdown-toc-section-4">2、缓冲区操作</a></li>
          <li><a href="#section-5" id="markdown-toc-section-5">3、波特率设置</a></li>
          <li><a href="#section-6" id="markdown-toc-section-6">4、从串口发送数据</a></li>
          <li><a href="#section-7" id="markdown-toc-section-7">5、从串口接收数据</a></li>
          <li><a href="#section-8" id="markdown-toc-section-8">6、关闭串口</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
<p>  </p>

<p>树莓派在linux上层支持通用的串口接口，用linux上通用的串口编程即可操作。<br />
树莓派3B的板载串口被蓝牙占用，但可以方便地使用USB串口模块。</p>

<!-- more -->

<h2 id="section">概述</h2>

<p>树莓派的板载串口是给系统登录使用的，我们要先把这个功能关掉。<br />
<strong>sudo raspi-config</strong><br />
Advanced Options –&gt; Serial –&gt; 关闭串口 –&gt; 重启</p>

<p>树莓派上有两个串口，一个硬件串口，工作稳定，但是分配给了蓝牙；还有一个“mini-uart”，这个串口的时钟是由内核提供，所以不太稳定  。
在树莓派3B上，蓝牙和硬件串口是不能兼得的。<br />
这个链接(<a href="http://ukonline2000.com/?p=880">http://ukonline2000.com/?p=880</a>)有介绍如何把硬件串口分配到GPIO14、GPIO15上，这里不做介绍了。</p>

<p>总之，在树莓派3B上，想要使用板载硬件串口是比较麻烦的，我们这里使用的是USB转串口模块，也能很方便地使用串口。</p>

<p>pypi库没有提供串口操作函数，我们使用串口的思路是通过linux上层通用的串口接口。</p>

<h2 id="pythonpyserial">python通用串口库——pyserial</h2>

<p>这里介绍的是第三方库 pyserial 的安装和使用。<br />
ubuntu、mac和树莓派上，只要安装了python都可以用此方法操作串口。</p>

<p>官网：<a href="http://pyserial.sourceforge.net/">http://pyserial.sourceforge.net/</a><br />
github主页：<a href="https://github.com/pyserial/pyserial">https://github.com/pyserial/pyserial</a></p>

<h3 id="section-1">一、安装</h3>

<p>网上有很多pip安装的方法，但那些好像都是针对python2的，python3安装不了，正确方法如下：<br />
<strong>mac下也可以用这种方法安装，但mac需要先安装驱动，我用的是PL2303，从官网下载的驱动，安装完成后的节点是 /dev/tty.usbserial。</strong></p>

<p>1、从github clone代码<br />
<strong>git clone git@github.com:pyserial/pyserial.git</strong></p>

<p>2、进入安装目录安装<br />
<strong>sudo python3 setup.py install</strong><br />
（在mac下安装不用sudo权限也行）</p>

<p>3、python3中import模块<br />
<strong>import serial</strong><br />
如果没有安装成功的话 import 会报错。</p>

<h3 id="section-2">二、使用</h3>

<p>首先要 <strong>import serial</strong></p>

<h4 id="section-3">1、打开串口并创建对象</h4>

<p><strong>[串口对象] = serial.Serial(‘[串口设备文件]’,<br />
              baudrate=[波特率],<br />
              bytesize=[数据位],<br />
              parity=’[校验]’,<br />
              stopbits=[停止位],<br />
              timeout=[timeout])</strong></p>

<ul>
  <li>串口设备文件就是/dev/目录下的设备文件，传入的是一个字符串，比如 ‘/dev/ttyUSB0’。</li>
  <li>budrate是波特率，<strong>传入的是数值</strong>。可以选择：<br />
2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200</li>
  <li>bytesize是数据位，<strong>传入的是数值</strong>。<br />
可以省略，默认是8。</li>
  <li>parity是校验，传入的是字符串。可以设置为：<br />
<strong>‘N’    不校验<br />
‘O’    奇校验（ODD）<br />
‘E’    偶校验（EVEN）</strong><br />
可以省略，默认是’N’。</li>
  <li>stopbits是停止位个数，<strong>传入的是数值</strong>，一般都是设成1。<br />
可以生录入，默认是1。</li>
  <li>timeout是超时等待，在接收数据时，如果接收到的字符不满足返回条件则会等待，超时后返回。</li>
</ul>

<p>  例1，指明所有参数：<br />
  <em>ser = serial.Serial(‘/dev/ttyUSB1’,<br />
           baudrate=9600,<br />
           bytesize=8,<br />
           parity=’N’,<br />
           stopbits=1,<br />
           timeout=3)</em><br />
  例2，只指定某些参数：<br />
  <em>ser = serial.Serial(‘/dev/ttyUSB1’, 9600, timeout=3)</em></p>

<h4 id="section-4">2、缓冲区操作</h4>

<p>  python对串口接收数据和单片机有所不同。<br />
  单片机接收到数据后会产生中断，然后在中断中处理数据。<br />
  <strong>python是不会产生串口中断的，接收到的数据会存放在缓冲区，然后python程序主动检查缓冲区读取数据。</strong>读取数据方法也有多种。<br />
  <strong>每次新打开一个串口，之前的缓冲区就会被清空。</strong><br />
  缓冲区有输入缓冲区和输出缓冲区。<br />
  缓冲区的大小是：</p>

<p>  <strong>[串口对象].flushInput()</strong><br />
  清除接收缓冲区，放弃接收到的所有内容。<br />
  <strong>[串口对象].flushOutput()</strong><br />
  清除发送缓冲区，放弃输出。</p>

<p>  <strong>[串口对象].inWaiting()</strong><br />
  【功能】获取缓冲区里的字节数。<br />
  【输出】返回一个数值，代表缓冲区里有多少数据。</p>

<h4 id="section-5">3、波特率设置</h4>

<p>  <strong>[串口对象].setBaudrate([波特率])</strong><br />
  设置已经打开的串口的波特率，传入的是数值，可以选择：<br />
  2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200</p>

<h4 id="section-6">4、从串口发送数据</h4>

<p>  <strong>[串口对象].write([单字节数组])</strong><br />
  <strong>发送的数据必须是单字节数据</strong>，可以是单字节组成的list，也可以是单字节编码的字符串（如ASCII、UTF-8）。
  返回的是写入的字节数。<br />
  例1，发送16进制数据：<br />
  <em>list1 = [0x01,0x02,0x03,0x10]<br />
  ser.write(list1)</em><br />
  会把这几个16进制数依次通过串口发出，另一端会接收到一模一样的数据。<br />
  例2，发送单字节编码的字符串：<br />
  <em>ser.write(b’abcdefg’)</em><br />
  把字符串’abcdefg’的ascii码发出，另一端收到：0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67。</p>

<h4 id="section-7">5、从串口接收数据</h4>

<p>  <strong>[串口对象].read([长度])</strong><br />
  【功能】从缓冲区读取指定长度内容。<br />
  【输入】<br />
  [长度] 是一个数值，代表要从缓冲区读取的字节数。<br />
  这个参数可以省略，默认是1。<br />
  【输出】输出的是一连串单字节数据。<br />
  【说明】<strong>如果缓冲区内容小于读取的长度则会等待，直到timeout后读取仅有的全部内容返回。</strong></p>

<p>  <strong>[串口对象].readall()</strong><br />
  【功能】读取缓冲区的所有数据。<br />
  【输出】输出的是一连串单字节数据。<br />
  <strong>这个函数必然会等待一个timeout时间，把之前缓冲区里所有内容和等待阶段接收到的所有内容读出。</strong></p>

<p>  <strong>[串口对象].readline()</strong><br />
  【功能】从缓冲区里读取一行。<br />
  【输出】输出的是一连串单字节数据。<br />
  【说明】<br />
  读取时会找到第一个’\n’结束，如果缓冲区里的数据没有’\n’，则会等待，知道timeout后返回仅有的所有内容。</p>

<h4 id="section-8">6、关闭串口</h4>

<p>  <strong>[串口对象].close()</strong></p>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派-pypi-GPIO]]></title>
    <link href="http://nicekwell.net/blog/20171119/shu-mei-pai-pypi-gpio.html"/>
    <updated>2017-11-19T22:44:47+08:00</updated>
    <id>http://nicekwell.net/blog/20171119/shu-mei-pai-pypi-gpio</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">1、导入模块</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">2、设置引脚排列方式</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">3、设置某个引脚的输入输出</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">4、输入</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">5、输出</a></li>
  <li><a href="#pythongpio" id="markdown-toc-pythongpio">python控制GPIO的速度</a></li>
</ul>
<p>  </p>

<!-- more -->

<h3 id="section">1、导入模块</h3>

<p><strong>import RPi.GPIO as GPIO</strong></p>

<h3 id="section-1">2、设置引脚排列方式</h3>

<p>1、主板编号方式<br />
<strong>GPIO.setmode(GPIO.BOARD)</strong><br />
就是按照主板的引脚顺序：<br />
<img src="/images/raspberrypi/2017-11-19-shu-mei-pai-pypi-gpio/1.png" alt="1.png" /><br />
注意有些引脚是没有GPIO功能的，这些引脚仍然为它们分配了序号，但控制时使用这些非GPIO的序号是会报错的。</p>

<p>2、BCM编号方式<br />
<strong>GPIO.setmode(GPIO.BCM)</strong><br />
按照BCM方式编号。<br />
<img src="/images/raspberrypi/2017-11-19-shu-mei-pai-pypi-gpio/2.jpg" alt="2.jpg" /></p>

<h3 id="section-2">3、设置某个引脚的输入输出</h3>

<p><strong>GPIO.setup([gpio], GPIO.[dir])</strong><br />
[GPIO]是一个引脚的序号，按照上面的编号方式决定。<br />
GPIO.[dir]是方向，可以设置：</p>

<table>
  <tbody>
    <tr>
      <td><strong>GPIO.IN</strong></td>
      <td>输入</td>
    </tr>
    <tr>
      <td><strong>GPIO.OUT</strong></td>
      <td>输出</td>
    </tr>
  </tbody>
</table>

<p>同时设置多个通道：<br />
<strong>chan_list = [[gpio1], [gpio2], …]</strong><br />
<strong>GPIO.setup(chan_list, GPIO_[dir]]</strong></p>

<h3 id="section-3">4、输入</h3>

<p><strong>GPIO.input([gpio])</strong><br />
获取指定通道的电平，返回的是一个数值，0或1。</p>

<h3 id="section-4">5、输出</h3>

<p>单通道输出：<br />
<strong>GPIO.output([gpio], GPIO.[level])</strong><br />
[gpio]是一个引脚的序号，按照上面的编号方式决定。<br />
GPIO.[level]是引脚的电平：</p>

<table>
  <tbody>
    <tr>
      <td><strong>GPIO.LOW</strong></td>
      <td>低电平</td>
    </tr>
    <tr>
      <td><strong>GPIO.HIGH</strong></td>
      <td>高电平（3.3v）</td>
    </tr>
  </tbody>
</table>

<p>同时设置多通道输出：<br />
<strong>chan_list = [[gpio1], [gpio2], …]</strong><br />
<strong>GPIO.output(chan_list, (GPIO.HIGH, GPIO.LOW, …))</strong><br />
第一个参数是list，第二个参数是tuple。</p>

<h3 id="pythongpio">python控制GPIO的速度</h3>

<p>设置python控制一个GPIO循环输出高低电平（不加延时），波形如下：<br />
<img src="/images/raspberrypi/2017-11-19-shu-mei-pai-pypi-gpio/3.png" alt="3.png" /></p>

<p>高低电平切换响应速度大约2us。<br />
但是注意，<strong>由于python是在上层运行的，所以波形输出不太稳定</strong>，上面是最理想的状态，实际上程序会受到影响，波形输出不稳定。</p>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派-pypi-说明和安装]]></title>
    <link href="http://nicekwell.net/blog/20171116/shu-mei-pai-pypi-shuo-ming-he-an-zhuang.html"/>
    <updated>2017-11-16T15:44:09+08:00</updated>
    <id>http://nicekwell.net/blog/20171116/shu-mei-pai-pypi-shuo-ming-he-an-zhuang</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">安装</a></li>
</ul>
<p>  </p>

<p>这个库完整的名字是raspberry-gpio-python，通过这个库可以方便地用python操作树莓派的GPIO，但没有提供SPI、i2c等操作接口。</p>

<!-- more -->

<h3 id="section">安装</h3>

<ul>
  <li>
    <p>1、安装python3<br />
<strong>sudo apt-get install python-dev python3-dev</strong></p>
  </li>
  <li>
    <p>2、下载pypi库:<br />
官方下载：<a href="https://pypi.python.org/pypi/RPi.GPIO">https://pypi.python.org/pypi/RPi.GPIO</a></p>
  </li>
  <li>
    <p>3、放到树莓派里，解压<br />
<strong>tar zxvf RPi.GPIO-0.6.2.tar.gz</strong></p>
  </li>
  <li>
    <p>4、进入解压后的目录，执行安装<br />
<strong>sudo python3 setup.py install</strong><br />
可参考解压后目录中的INSTALL.txt文档说明。</p>
  </li>
</ul>

<p>安装成功后就可以使用 RPi.GPIO模块了。</p>

<hr />

<p>本站所有文章欢迎转载，但请保留作者信息和原文地址。</p>

]]></content>
  </entry>
  
</feed>
